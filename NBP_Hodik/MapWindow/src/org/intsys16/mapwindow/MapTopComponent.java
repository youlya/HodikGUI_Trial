/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.intsys16.mapwindow;

import java.awt.BorderLayout;
import java.awt.Color;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javafx.beans.value.ObservableValue;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.fxml.JavaFXBuilderFactory;
import javafx.scene.Group;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ListView;
import org.intsys16.gamelogic.FieldControl.Field;
import org.intsys16.gamelogic.RobotsControl.robot;
import org.intsys16.integrator.api.Integrator;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.windows.WindowManager;
import org.intsys16.GraphicMapAPI.GraphicMapAPI;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.intsys16.mapwindow//Map//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MapTopComponent",
        iconBase = "org/intsys16/mapwindow/scatchPlanet24.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "properties_map", openAtStartup = false)
@ActionID(category = "Window", id = "org.intsys16.mapwindow.MapTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MapAction",
        preferredID = "MapTopComponent"
)
@Messages({
    "CTL_MapAction=Map Window",
    "CTL_MapTopComponent=Map Window",
    "HINT_MapTopComponent=This is a Map window"
})
public final class MapTopComponent extends TopComponent {

    private static JFXPanel fxPanel;
    private static Integrator integrator = Integrator.getIntegrator();
    private static final Logger logger = Logger.getLogger(MapTopComponent.class.getName());
    private final double fieldWidthPx = 600;
    private final int fieldCellNumber = 7;
//    private Lookup lookup;
    
    public MapTopComponent() {
        initComponents();
        setName(Bundle.CTL_MapTopComponent());
        setToolTipText(Bundle.HINT_MapTopComponent());
//        lookup = Lookups.singleton(graphMap);
//        associateLookup(lookup);
        setLayout(new BorderLayout());
        init();     
    }
//    @Override
//    public Lookup getLookup() {
//        return lookup;
//    }

    public void init() {
        fxPanel = new JFXPanel();
        add(fxPanel, BorderLayout.CENTER);
        
        /**
         * @notice
         * this method set to false keeps javafx application thread alive 
         * when all jfx windows are closed
         * (without it we'll see the blank page if reopen the window)
         */
        Platform.setImplicitExit(false); 
        
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                createScene();
            }
        });
    }
    
    private void createScene() {
       GraphicMap map = (GraphicMap)GraphicMapAPI.getGraphicMap();
       Scene scene = new Scene(map);
       fxPanel.setScene(scene);
       map.setParameters(fieldWidthPx, fieldCellNumber, 
               (robot) integrator.getCurrentRobot(), (Field) integrator.getCurrentField());
       
       scene.widthProperty().addListener((ObservableValue<? extends Number> observableValue, Number oldSceneWidth, Number newSceneWidth) -> {
            map.setPrefWidth((double) newSceneWidth);
        });
       scene.heightProperty().addListener((ObservableValue<? extends Number> observableValue, Number oldSceneHeight, Number newSceneHeight) -> {
            map.setPrefHeight((double) newSceneHeight);
        });
       
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
